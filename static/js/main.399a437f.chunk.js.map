{"version":3,"sources":["components/UI/Section.module.css","components/Tasks/TaskItem.module.css","components/Tasks/Tasks.module.css","components/NewTask/TaskForm.module.css","components/UI/Section.js","components/Tasks/TaskItem.js","components/Tasks/Tasks.js","components/NewTask/TaskForm.js","hooks/use-http.js","components/NewTask/NewTask.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","props","className","classes","section","children","TaskItem","task","Tasks","taskList","items","length","map","text","id","content","error","onClick","onFetch","loading","container","TaskForm","taskInputRef","useRef","form","onSubmit","event","preventDefault","enteredValue","current","value","trim","onEnterTask","type","ref","useHttp","React","useState","isLoading","setIsLoading","setError","sendRequest","useCallback","requestConfig","applyData","a","fetch","url","method","headers","body","JSON","stringify","response","ok","Error","json","data","console","message","NewTask","sendTaskRequest","createTask","taskText","taskData","createdTask","name","onAddTask","enterTaskHandler","bind","App","tasks","setTasks","fetchTasks","useEffect","tasksObj","loadedTasks","taskKey","push","Fragment","prevTasks","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.399a437f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3BmrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"TaskItem_task__1D62d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tasks_container__3PkTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TaskForm_form__3iQzu\"};","import classes from './Section.module.css';\r\n\r\nconst Section = props => <section className={classes.section}>{props.children}</section>;\r\n\r\nexport default Section;\r\n","import classes from './TaskItem.module.css';\r\n\r\nconst TaskItem = props => <li className={classes.task}>{props.children}</li>\r\n\r\nexport default TaskItem;\r\n","import Section from '../UI/Section';\r\nimport TaskItem from './TaskItem';\r\nimport classes from './Tasks.module.css';\r\n\r\nconst Tasks = props => {\r\n    let taskList = <h2>No tasks found. Start adding some!</h2>;\r\n    if(props.items.length > 0)\r\n        taskList = <ul>{props.items.map(task => <TaskItem key={task.id}>{task.text}</TaskItem>)}\r\n    </ul>\r\n    let content = taskList;\r\n    if(props.error) content = <button onClick={props.onFetch}>Try again</button>;\r\n    if(props.loading) content = 'Loading tasks...';\r\n\r\n    return <Section>\r\n        <div className={classes.container}>{content}</div>\r\n    </Section>\r\n};\r\n\r\nexport default Tasks;","import { useRef } from 'react';\r\nimport classes from './TaskForm.module.css';\r\n\r\nconst TaskForm = props => {\r\n    const taskInputRef = useRef();\r\n    \r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n        const enteredValue = taskInputRef.current.value;\r\n        if (enteredValue.trim().length > 0) props.onEnterTask(enteredValue);\r\n        taskInputRef.current.value = '';\r\n    };\r\n\r\n    return <form className={classes.form} onSubmit={submitHandler}>\r\n        <input type='text' ref={taskInputRef} />\r\n        <button>{props.loading ? 'Sending...' : 'Add Task'}</button>\r\n    </form>\r\n};\r\n\r\nexport default TaskForm;","import React from 'react';\r\n\r\nconst useHttp = () => {\r\n\tconst [isLoading, setIsLoading] = React.useState(false);\r\n    const [error, setError] = React.useState(null);\r\n\r\n    const sendRequest = React.useCallback(async (requestConfig, applyData) => {\r\n    \tsetIsLoading(true);\r\n    \tsetError(null);\r\n    \ttry{\r\n    \t\tconst response = await fetch(requestConfig.url, {\r\n    \t\t\tmethod: requestConfig.method ? requestConfig.method : 'GET',\r\n    \t\t\theaders: requestConfig.headers ? requestConfig.headers : {},\r\n    \t\t\tbody: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n    \t\t});\r\n    \t\tif(!response.ok) throw new Error('Request failed!');\r\n    \t\tconst data = await response.json();\r\n    \t\tapplyData(data);\r\n    \t}catch(err){\r\n    \t\tconsole.error(err.message)\r\n    \t\tsetError(err.message || 'Something went wrong!');\r\n    \t}\r\n    \tsetIsLoading(false);\r\n    }, []);\r\n\r\n    return {\r\n    \tisLoading,\r\n    \terror,\r\n    \tsendRequest\r\n    };\r\n};\r\n\r\nexport default useHttp;","import React from 'react';\r\nimport Section from '../UI/Section';\r\nimport TaskForm from './TaskForm';\r\nimport useHttp from '../../hooks/use-http';\r\n\r\nconst NewTask = (props) => {\r\n    const { isLoading, error, sendRequest: sendTaskRequest } = useHttp();\r\n\r\n    const createTask = (taskText, taskData) => {\r\n        const generatedId = taskData.name;\r\n        const createdTask = { id: generatedId, text: taskText };\r\n        props.onAddTask(createdTask);\r\n    };\r\n    const enterTaskHandler = async taskText => {\r\n        sendTaskRequest({\r\n            url: 'https://section-15-35028-default-rtdb.firebaseio.com/tasks.json',\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: { text: taskText },\r\n        },createTask.bind(null, taskText));\r\n    };\r\n\r\n    return <Section>\r\n        <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\r\n        {error && <p>{error}</p>}\r\n    </Section>\r\n};\r\n\r\nexport default NewTask;","import React from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './hooks/use-http';\n\nconst App = () => {\n    const [tasks, setTasks] = React.useState([]);\n\n    const { isLoading, error, sendRequest: fetchTasks } = useHttp();\n    React.useEffect(() => {\n        const transformTasks = tasksObj => {\n            const loadedTasks = [];\n            for (const taskKey in tasksObj)\n                loadedTasks.push({ id: taskKey, text: tasksObj[taskKey].text });\n            setTasks(loadedTasks);\n        };\n        fetchTasks(\n            { url: 'https://section-15-35028-default-rtdb.firebaseio.com/tasks.json' },\n            transformTasks\n        );\n    }, [fetchTasks]);\n    const taskAddHandler = task => setTasks(prevTasks => prevTasks.concat(task));\n\n    return <React.Fragment>\n        <NewTask onAddTask={taskAddHandler} />\n        <Tasks items={tasks} loading={isLoading} error={error} onFetch={fetchTasks}/>\n    </React.Fragment>\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}